1. What is the total amount each customer spent at the restaurant?
SELECT s.customer_id, SUM(m.price) AS total_amt
FROM dannys_diner.sales s
JOIN dannys_diner.menu m
ON s.product_id = m.product_id
GROUP BY s.customer_id
ORDER BY total_amt DESC;

2. How many days has each customer visited the restaurant?
SELECT customer_id, COUNT(DISTINCT (order_date)) as order_days
FROM dannys_diner.sales
GROUP BY customer_id
ORDER BY customer_id;

3. What was the first item from the menu purchased by each customer?
WITH ordered_sales_cte AS
(
 SELECT customer_id, order_date, product_name,
  DENSE_RANK() OVER(PARTITION BY s.customer_id
  ORDER BY s.order_date) AS rank
 FROM dannys_diner.sales AS s
 JOIN dannys_diner.menu AS m
  ON s.product_id = m.product_id
)
SELECT customer_id, product_name
FROM ordered_sales_cte
WHERE rank = 1
GROUP BY customer_id, product_name;

 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT (COUNT(s.product_id))as item_count,m.product_name
FROM dannys_diner.menu m
JOIN dannys_diner.sales s
ON m.product_id = s.product_id
GROUP BY product_name
ORDER BY item_count DESC
LIMIT 1;

 5. Which item was the most popular for each customer?
WITH fav_item_cte AS (
  SELECT m.product_name, s.customer_id,
  COUNT(s.product_id) AS item_count,
  DENSE_RANK() OVER(partition by s.customer_id ORDER BY COUNT(s.product_id)DESC) AS 	rank
  FROM dannys_diner.sales s
  JOIN dannys_diner.menu m
  ON s.product_id = m.product_id
  GROUP BY m.product_name, s.customer_id)
  
SELECT product_name,customer_id,item_count
FROM fav_item_cte
WHERE rank = 1;

6. Which item was purchased first by the customer after they became a member?
WITH order_sales_cte as (
  SELECT s.customer_id, s.order_date, b.join_date,s.product_id,m.product_name,
  DENSE_RANK() OVER(partition by s.customer_id ORDER BY s.order_date) rank
  FROM dannys_diner.sales s
  JOIN dannys_diner.menu m
  ON s.product_id = m.product_id
  JOIN dannys_diner.members b
  ON s.customer_id = b.customer_id
  WHERE s.order_date >= b.join_date)
SELECT customer_id, product_name
FROM order_sales_cte 
WHERE rank = 1
GROUP BY customer_id, product_name;

7. Which item was purchased just before the customer became a member?
WITH order_sales_cte as (
  SELECT s.customer_id, s.order_date, b.join_date,s.product_id,m.product_name,
  DENSE_RANK() OVER(partition by s.customer_id ORDER BY s.order_date) rank
  FROM dannys_diner.sales s
  JOIN dannys_diner.menu m
  ON s.product_id = m.product_id
  JOIN dannys_diner.members b
  ON s.customer_id = b.customer_id
  WHERE s.order_date < b.join_date)
SELECT customer_id,order_date, product_name
FROM order_sales_cte 
WHERE rank = 1
;

8. What is the total items and amount spent for each member before they became a member?
SELECT s.customer_id, COUNT(DISTINCT(s.product_id)) as unique_items, SUM(m.price) amount_spent
FROM dannys_diner.sales s
JOIN dannys_diner.menu m
ON s.product_id = m.product_id
JOIN dannys_diner.members b
ON s.customer_id = b.customer_id
WHERE s.order_date < b.join_date
GROUP BY 1;

9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
WITH price_points_cte AS (
  SELECT *,
  CASE WHEN product_id = 1 THEN price * 20
  ELSE price * 10
  END AS points
  FROM dannys_diner.menu)
  
SELECT s.customer_id, SUM(p.points) AS total_points
FROM price_points_cte p
JOIN dannys_diner.sales s
ON s.product_id = p.product_id
GROUP BY s.customer_id
ORDER BY s.customer_id;

10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

WITH date_cte AS (
  SELECT*,
  join_date + INTERVAL'6 DAY' as valid_date,
  date_trunc('month', join_date) + interval '1 month' - interval '1 day' as 	  last_date
  FROM dannys_diner.members b)

SELECT s.customer_id, m.product_name,b.join_date, s.order_date,d.valid_date, d.last_date, m.price,
SUM(CASE
    WHEN product_name = 'sushi' THEN 20 * m.price
	WHEN order_date BETWEEN b.join_date AND d.valid_date THEN 20 * m.price
    ELSE 10 * m.price
    END) AS points 
FROM date_cte d
JOIN dannys_diner.sales s
ON d.customer_id = s.customer_id
JOIN dannys_diner.menu m
ON s.product_id = m.product_id
JOIN  dannys_diner.members b
ON s.customer_id = b.customer_id
WHERE s.order_date < d.last_date
GROUP BY s.customer_id, m.product_name,b.join_date, s.order_date,d.valid_date, d.last_date, price;
  
  
